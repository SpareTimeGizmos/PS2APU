//++
//debug.h - declarations for debug.c
//
// Copyright (C) 2006-2024 by Spare Time Gizmos.  All rights reserved.
//
// This firmware is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
// more details.
//
// You should have received a copy of the GNU General Public License along with
// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
// Place, Suite 330, Boston, MA  02111-1307  USA.
//
//REVISION HISTORY:
// dd-mmm-yy    who     description
//  4-Feb-06    RLA     New file.
// 12-May-24	RLA	Add prototypes for getchar() and putchar()
//			Add baud options for 12MHz and 14.31813MHz.
//--
#pragma once

//   The serial port baud rate is generated by timer 1 in 8 bit auto reload
// mode, and the rate is determined by:
//
//  T1RELOAD = 256 - ( CPU_CLOCK / (16*12*BAUD_RATE) ) [SMOD == 1]
//  T1RELOAD = 256 - ( CPU_CLOCK / (32*12*BAUD_RATE) ) [SMOD == 0]
#if   (CPUCLOCK == 11059200UL)
//   A 11.0592MHz crystal, not surprisingly, can generate pretty much any
// standard baud rate with 100% accuracy.  We'll stick to 9600 for convenience.
#define T1RELOAD	0xFD	// 9600 bps with SMOD==0 and 11.0592MHz clock
#define USE_SMOD	0	// ...
#elif (CPUCLOCK == 12000000UL)
//   The VT1802 derives the APU clock from the dot clock to save needing yet
// another crystal, and that limits us to either a 12MHz or a 14,31818MHz
// clock.  Unfortunately neither of these is really ideal for generating
// standard baud rates, but with 12Mhz we can do a passable approximation of
// 4800 bps.
#define T1RELOAD	0xF3	// 4800 bps with SMOD==1 and 12.0000MHz clock
#define USE_SMOD	1	// ...
#elif (CPUCLOCK == 14318180UL)
//   With a 14.31818MHz clock the best we can do is 2400 baud.  Of course, you
// can generate all kinds of non-standard rates, but all the standard baud
// rates higher than 2400 have way too much error.
#define T1RELOAD	0xE1	// 2400 bps with SMOD==1 and 14.31818MHz clock
#define USE_SMOD	1
#elif
#error Undefined CPUCLOCK for baud rate!
#endif

// Debugging macros...
#ifdef DEBUG
#define DBGOUT(x)	printf_tiny x
#define ASSERT(c,x)	if (!(c)) printf_tiny x
#define VERIFY(c,x)	if (!(c)) printf_tiny x
#else
#define DBGOUT(x)
#define ASSERT(c,x)
#define VERIFY(c,x)	c 
#endif

// Intialize the 8051's internal UART ...
extern void InitializeDebugSerial (void);
extern int putchar (int c);
extern int getchar (void);
